git clone --depth 1 https://github.com/immortalwrt/homeproxy luci-app-homeproxy
git clone --depth 1 https://github.com/jerrykuku/luci-theme-argon luci-theme-argon
git clone --depth 1 https://github.com/jerrykuku/luci-app-argon-config luci-app-argon-config

# 定义 clone_and_move 函数
clone_and_move() {
    temp_dir=$(mktemp -d) &&
    git clone --depth 1 --branch "$1" "$2" "$temp_dir" &&
    [ -d "$temp_dir/$3" ] && mv "$temp_dir/$3" "$4" || echo "Error: Subdirectory $3 not found."
    rm -rf "$temp_dir"
}

# 定义 repos 数组
repos=(
    "main https://github.com/gdy666/luci-app-lucky luci-app-lucky ./luci-app-lucky"
    "main https://github.com/nikkinikki-org/OpenWrt-nikki luci-app-nikki ./luci-app-nikki"
    "master https://github.com/vernesong/OpenClash luci-app-openclash ./luci-app-openclash"
    "master https://github.com/immortalwrt/luci applications/luci-app-zerotier ./luci-app-zerotier"
    "master https://github.com/immortalwrt/luci applications/luci-app-autoreboot ./luci-app-autoreboot"
    "master https://github.com/immortalwrt/packages net/zerotier ./zerotier"
    "master https://github.com/immortalwrt/packages libs/libnatpmp ./libnatpmp"
    "master https://github.com/immortalwrt/packages net/miniupnpc ./miniupnpc"
    "master https://github.com/immortalwrt/luci applications/luci-app-filebrowser ./luci-app-filebrowser"
    "master https://github.com/immortalwrt/packages utils/filebrowser ./filebrowser"
    # subconverter
    "master https://github.com/immortalwrt/packages net/subconverter ./subconverter"
    "master https://github.com/immortalwrt/packages libs/libcron ./libcron"
    "master https://github.com/immortalwrt/packages libs/quickjspp ./quickjspp"
    # sub-web
    "master https://github.com/immortalwrt/packages net/sub-web ./sub-web"   
)

# 遍历 repos 数组并调用 clone_and_move 函数
for repo in "${repos[@]}"; do
    IFS=' ' read -r branch repo_url repo_subdir target_dir <<< "$repo"
    echo "Cloning repository: $repo_url (branch: $branch)..."
    clone_and_move "$branch" "$repo_url" "$repo_subdir" "$target_dir"
done

# 更正 Makefile 内容
sed -i \
-e 's?include \.\./\.\./\(lang\|devel\)?include $(TOPDIR)/feeds/packages/\1?' \
-e 's?2. Clash For OpenWRT?3. Applications?' \
-e 's?\.\./\.\./luci.mk?$(TOPDIR)/feeds/luci/luci.mk?' \
-e 's/ca-certificates/ca-bundle/' \
-e 's/php7/php8/g' \
-e 's/+docker /+docker +dockerd /g' \
*/Makefile


##更新HASH
PACKAGES=("subconverter" "sub-web")
TMP_DIR="/tmp/pkg_hash_update"
mkdir -p "$TMP_DIR"

for package in "${PACKAGES[@]}"; do
    MAKEFILE="./${package}/Makefile"
    [ -f "$MAKEFILE" ] || { echo "❌ $MAKEFILE 不存在"; continue; }

    # 提取变量
    SOURCE_URL=$(awk -F':=' '/^PKG_SOURCE_URL:=/{print $2}' "$MAKEFILE" | sed 's/^[ \t]*//')
    OLD_VERSION=$(awk -F':=' '/^PKG_SOURCE_VERSION:=/{print $2}' "$MAKEFILE" | sed 's/^[ \t]*//')
    OLD_HASH=$(awk -F':=' '/^PKG_MIRROR_HASH:=/{print $2}' "$MAKEFILE" | sed 's/^[ \t]*//')
    [ -z "$SOURCE_URL" ] && { echo "❌ 无法获取源码URL"; continue; }

    # 克隆和计算哈希
    CLONE_DIR="${TMP_DIR}/${package}"
    rm -rf "$CLONE_DIR"
    git clone -q "$SOURCE_URL" "$CLONE_DIR" || { echo "❌ 克隆失败"; continue; }
    
    NEW_VERSION=$(git -C "$CLONE_DIR" rev-parse HEAD)
    tar czf "${TMP_DIR}/${package}.tar.gz" -C "$CLONE_DIR" . || { echo "❌ 创建tar包失败"; continue; }
    NEW_HASH=$(sha256sum "${TMP_DIR}/${package}.tar.gz" | awk '{print $1}')

    # 更新Makefile
    sed -i "s/^PKG_SOURCE_VERSION:=.*/PKG_SOURCE_VERSION:=$NEW_VERSION/; \
            s/^PKG_MIRROR_HASH:=.*/PKG_MIRROR_HASH:=$NEW_HASH/" "$MAKEFILE"

    echo "✅ $package 更新成功"
    echo "版本: $OLD_VERSION -> $NEW_VERSION"
    echo "哈希: $OLD_HASH -> $NEW_HASH"
done

rm -rf "$TMP_DIR"

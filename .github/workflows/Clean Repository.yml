name: Clean Repository
on:
  workflow_dispatch:
    inputs:
      CLEAN_CACHE:
        description: "是否清理 GitHub Actions 缓存"
        required: false
        default: "false"
        type: choice
        options:
          - "true"
          - "false"
          
jobs:
  cleanup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cleanup
        run: |
          echo "Fetching list of cache key"
          cacheKeysForPR=$(gh cache list --ref $BRANCH --limit 100 --json id --jq '.[].id')

          ## Setting this to not fail the workflow while deleting cache keys.
          set +e
          echo "Deleting caches..."
          for cacheKey in $cacheKeysForPR
          do
              gh cache delete $cacheKey
          done
          echo "Done"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
          BRANCH: refs/pull/${{ github.event.pull_request.number }}/merge     
      
      
      - name: Delete all except .github and README.md
        run: |
          # 列出所有文件/目录（除 .github 和 README.md）
          find . -mindepth 1 -maxdepth 1 \
            ! -name '.github' \
            ! -name 'README.md' \
            ! -name '.git' \
            -exec rm -rf {} +
          
          # 提交更改
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add -A
          git commit -m "清理仓库：只保留 .github 和 README.md" || echo "没有变更"
          git push

      - name: Clear cache
        if: github.event.inputs.CLEAN_CACHE == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "清理 GitHub Actions 缓存..."
          # 使用 GitHub API 列出缓存
          caches=$(gh api /repos/${{ github.repository }}/actions/caches --paginate)
          
          # 检查是否有缓存
          if [[ -z "$caches" || "$caches" == "[]" ]]; then
            echo "没有缓存可删除"
          else
            # 如果有缓存，解析并删除
            cache_ids=$(echo "$caches" | jq -r '.actions[] | .id')
            for cache_id in $cache_ids; do
              echo "删除缓存 ID: $cache_id"
              gh api -X DELETE /repos/${{ github.repository }}/actions/caches/$cache_id
            done
          fi

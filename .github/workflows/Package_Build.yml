name: Package Build

on:
  workflow_dispatch:
    inputs:
      packages:
        description: "Changed packages"
        required: false
        default: ""  # 默认值为空
jobs:
  build:
    name: build ${{ matrix.arch }}-${{ matrix.sdk }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        sdk:
          #- 24.10.0
          - openwrt-24.10.0
          #- master
        arch:
          - x86_64

    steps:
      - uses: actions/checkout@main
        with:
          fetch-depth: 0

      - name: Build
        #uses: openwrt/gh-action-sdk@main
        #uses: immortalwrt/gh-action-sdk@master
        uses: Super-Passerby/gh-action-sdk@fixup-option
        env:
          ARCH: ${{ matrix.arch }}-${{ matrix.sdk }}
          FEEDNAME: packages_ci
          PACKAGES: ${{ github.event.inputs.packages }}               
          NO_REFRESH_CHECK: true
          IGNORE_ERRORS: true
          FIXUP: 1

      - name: Delete other language
        run: |
          find bin/packages/${{ matrix.arch }}/packages_ci -type f -name "luci-i18n*" ! -name "*zh-cn*" -delete



      - name: Set start time (Asia/Shanghai timezone)
        id: set_time
        run: |
          # 获取当前时间并格式化
          START_TIME_TAG=$(TZ="Asia/Shanghai" date +'%Y.%m.%d-%H_%M')
          START_TIME_RELEASE=$(TZ="Asia/Shanghai" date +'%Y-%m-%d %H:%M')
          
          echo "Start time: $START_TIME_TAG"
                         
          echo "START_TIME_TAG=$START_TIME_TAG" >> $GITHUB_ENV
          echo "START_TIME_RELEASE=$START_TIME_RELEASE" >> $GITHUB_ENV

      - name: Create Git tag
        id: create_tag
        run: |
          # 设置标签名
          TAG_NAME_FM="IPK：${{ env.START_TIME_TAG }}"
          RELEASE_NAME_FM="插件发布时间(UTC+8)：${{ env.START_TIME_RELEASE }}"
          
          # 输出标签名和发布名         
          echo "TAG_NAME_FM=$TAG_NAME_FM" >> $GITHUB_ENV
          echo "RELEASE_NAME_FM=$RELEASE_NAME_FM" >> $GITHUB_ENV
          
          # 输出标签名和发布名到后续步骤
          echo "TAG_NAME_FM=$TAG_NAME_FM" >> $GITHUB_OUTPUT
          echo "RELEASE_NAME_FM=$RELEASE_NAME_FM" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release Tag
        run: |
          gh release create "${{ env.TAG_NAME_FM }}" \
            --title "${{ env.RELEASE_NAME_FM }}" \
            --notes "更新固件：${{ env.PACKAGES }}"  \
            --repo "${{ github.repository }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Files to Existing Release
        run: |
          gh release upload ${{ env.TAG_NAME_FM }} ./bin/packages/${{ matrix.arch }}/packages_ci/*.ipk --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                             
      - name: Delete releases tags and workflows runs
        uses: ophub/delete-releases-workflows@main
        with:
          #设置是否删除 releases 文件（选项：true/false），默认为 false。
          delete_releases: true
          #设置是否删除与 Releases 关联的 tags（选项：true/false），默认为 false。
          delete_tags: true
          #设置是否区分预发行版本（选项：all/true/false）。all表示全部类型，true/false代表仅删除标记为此类型的 releases 文件。默认为 all。
          prerelease_option: all
          #设置保留几个最新的 Releases 版本（整数。如：5），设置为 0 表示全部删除，默认保留 90 个。
          releases_keep_latest: 6
          #设置需要保留的 Releases 的 tags 关键字，多个关键字使用 / 分割（例如：book/tool），默认值 无。
          #releases_keep_keyword: 
          #设置是否删除 workflows 运行记录（选项：true/false），默认为 false。
          delete_workflows: true
          #设置保留几天以内的 workflows 记录（整数。如：30），设置为 0 表示全部删除。默认为 90 天。
          workflows_keep_day: 6
          #设置需要保留的 workflows 运行记录的名称关键字，多个关键字使用 / 分割（例如：book/tool），默认值 无。
          #workflows_keep_keyword:
          #设置是否输出详细的 json 日志（选项：true/false），默认值 false。
          #out_log: 
          #设置执行操作的 <owner>/<repo> ，默认为当前仓库。
          #repo: 
          gh_token: ${{ secrets.GITHUB_TOKEN }}

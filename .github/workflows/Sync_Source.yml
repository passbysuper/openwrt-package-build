name: Sync Source

on:
  push:
    paths:
      - '.github/workflows/Sync_packages.yml'
      - '.github/diy/Source'
  schedule:
    - cron: 0 */4 * * *
  repository_dispatch:
  workflow_dispatch:  # 添加此行，支持手动触发
  
jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id
    runs-on: ubuntu-latest

    name: Update ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [main]

    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        fetch-depth: 0

    - name: Initialization environment
      run : |
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"
        git config --global user.name "${{ github.actor }}"
        sudo timedatectl set-timezone "Asia/Shanghai"
        
    - name: Clone packages
      run: |
        cd $GITHUB_WORKSPACE
        chmod +x .github/diy/Source
        git clone -b ${{matrix.target}} https://github.com/${{ github.repository }}.git ${{matrix.target}}
        cd ${{matrix.target}}
        git rm -r --cache * >/dev/null 2>&1 &
        rm -rf `find ./* -maxdepth 0 -type d ! -name "diy"` >/dev/null 2>&1
        $GITHUB_WORKSPACE/.github/diy/Source
        bash /$GITHUB_WORKSPACE/.github/diy/convert_translation
        bash /$GITHUB_WORKSPACE/.github/diy/create_acl_for_luci -a
        bash /$GITHUB_WORKSPACE/.github/diy/modify

    - name: SSH（INPUT"q" ➡️ RUN："./mv" ➡️ “exit”）
      if: false  # 跳过该步骤
      uses: mxschmitt/action-tmate@v3

    - name: Upload
      run: |
        if [ -e $GITHUB_WORKSPACE/LICENSE ]; then
          cp $GITHUB_WORKSPACE/LICENSE $GITHUB_WORKSPACE/${{matrix.target}}
        fi
        if [ -e $GITHUB_WORKSPACE/README.md ]; then
          cp $GITHUB_WORKSPACE/README.md $GITHUB_WORKSPACE/${{matrix.target}}
        fi
        cd $GITHUB_WORKSPACE/${{matrix.target}}
        if git status --porcelain | grep .; then
          git add .
          git commit -am "update $(date '+%Y-%m-%d %H:%M:%S')"
          git push --quiet "https://${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git" HEAD:${{ matrix.target }}
        else
          echo "nothing to commit"
          exit 0
        fi || exit 0


  check:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        fetch-depth: 0

    - name: Check for changes
      id: detect_changes
      run: |
        # 调试：显示当前工作目录
        echo "Current workspace:"
        pwd

        # 定义哈希缓存文件路径
        HASH_CACHE_FILE=".github/hash_cache.txt"

        # 创建哈希缓存文件（如果不存在）
        if [[ ! -f "$HASH_CACHE_FILE" ]]; then
            echo "Hash cache file not found. Creating a new one..."
            touch "$HASH_CACHE_FILE"
        fi

        # 获取所有文件夹的哈希值
        echo "Calculating folder hashes..."
        CURRENT_HASHES=$(find . -type d -not -path './.github/*' -not -path './README.md' -exec sh -c 'find "$1" -type f -exec md5sum {} + | sort | md5sum' _ {} \; | sort)

        # 调试：显示当前哈希值
        echo "Current folder hashes:"
        echo "$CURRENT_HASHES"

        # 读取上一次的哈希值
        PREVIOUS_HASHES=$(cat "$HASH_CACHE_FILE" 2>/dev/null || true)

        # 调试：显示上一次的哈希值
        echo "Previous folder hashes:"
        echo "$PREVIOUS_HASHES"

        # 对比哈希值，找出变化的文件夹
        CHANGED_DIRS=$(diff <(echo "$PREVIOUS_HASHES") <(echo "$CURRENT_HASHES") | grep '^<\|^>' | awk '{print $2}' | sort -u | tr '\n' ' ')

        # 调试：显示变化的文件夹
        echo "Changed directories:"
        echo "$CHANGED_DIRS"

        # 如果有变动的目录，则保存到 GitHub 环境变量
        if [[ -n "$CHANGED_DIRS" ]]; then
            echo "changes=true" >> $GITHUB_ENV
            echo "changed_dirs=$CHANGED_DIRS" >> $GITHUB_ENV
        else
            echo "changes=false" >> $GITHUB_ENV
        fi

        # 更新哈希缓存文件
        echo "$CURRENT_HASHES" > "$HASH_CACHE_FILE"

        # 调试：显示环境变量的内容
        echo "Environment variables set:"
        cat $GITHUB_ENV

    - name: Commit and push hash cache
      if: env.changes == 'true'
      run: |
        # 配置 Git 用户信息
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"

        # 添加哈希缓存文件到暂存区
        git add .github/hash_cache.txt

        # 提交更改
        git commit -m "Update hash cache [skip ci]"

        # 推送到仓库（使用 GH_PAT 进行身份验证）
        git push --quiet "https://${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git" HEAD:${{ github.ref }}

       


    - name: Trigger Package_Build workflow
      if: env.changes == 'true'
      uses: benc-uk/workflow-dispatch@v1
      with:
        workflow: .github/workflows/Package_Build.yml  # 确保路径正确
        token: ${{ secrets.GITHUB_TOKEN }}
        inputs: '{"packages": "${{ env.changed_dirs }}"}'

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}
        retain_days: 1
        keep_minimum_runs: 5

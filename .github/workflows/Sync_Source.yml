name: Sync Source

on:
  push:
    paths:
      - '.github/workflows/Sync_packages.yml'
      - '.github/diy/Source'
  schedule:
    - cron: 0 */4 * * *
  repository_dispatch:
  workflow_dispatch:  # 添加此行，支持手动触发
  
jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id
    runs-on: ubuntu-latest

    name: Update ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [main]

    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
        fetch-depth: 0

    - name: Initialization environment
      run : |
        git config --global user.email "${{ github.actor }}@users.noreply.github.com"
        git config --global user.name "${{ github.actor }}"
        sudo timedatectl set-timezone "Asia/Shanghai"
        
    - name: Clone packages
      run: |
        cd $GITHUB_WORKSPACE
        chmod +x .github/diy/Source
        git clone -b ${{matrix.target}} https://github.com/${{ github.repository }}.git ${{matrix.target}}
        cd ${{matrix.target}}
        git rm -r --cache * >/dev/null 2>&1 &
        rm -rf `find ./* -maxdepth 0 -type d ! -name "diy"` >/dev/null 2>&1
        $GITHUB_WORKSPACE/.github/diy/Source
        bash /$GITHUB_WORKSPACE/.github/diy/convert_translation
        bash /$GITHUB_WORKSPACE/.github/diy/create_acl_for_luci -a
        bash /$GITHUB_WORKSPACE/.github/diy/modify

    - name: SSH（INPUT"q" ➡️ RUN："./mv" ➡️ “exit”）
      if: false  # 跳过该步骤
      uses: mxschmitt/action-tmate@v3


    - name: Compare directories
      id: compare_dirs
      run: |
        # 定义源目录和目标目录
        SOURCE_DIR="$GITHUB_WORKSPACE"
        TARGET_DIR="$GITHUB_WORKSPACE/${{matrix.target}}"

        # 排除的目录和文件
        EXCLUDE_LIST=("${{matrix.target}}" ".github" "README.md" ".git")

        # 构建 rsync 的排除参数
        EXCLUDE_PARAMS=()
        for item in "${EXCLUDE_LIST[@]}"; do
          EXCLUDE_PARAMS+=("--exclude=$item")
        done

        # 使用 rsync 对比两个目录的差异（忽略软链接，并详细列出差异）
        # 1. 检测 SOURCE_DIR 中新增或修改的文件和目录
        CHANGED_FILES_SOURCE=$(rsync -rcn --itemize-changes --prune-empty-dirs -l "${EXCLUDE_PARAMS[@]}" "$SOURCE_DIR/" "$TARGET_DIR/")

        # 2. 检测 TARGET_DIR 中新增的文件和目录
        CHANGED_FILES_TARGET=$(rsync -rcn --itemize-changes --prune-empty-dirs -l "${EXCLUDE_PARAMS[@]}" "$TARGET_DIR/" "$SOURCE_DIR/")

        # 合并两个结果
        CHANGED_FILES=$(echo -e "$CHANGED_FILES_SOURCE\n$CHANGED_FILES_TARGET" | sort -u)

        # 调试：列出所有变更的文件和目录名称
        echo "Changed files and directories:"
        echo "$CHANGED_FILES"

        # 提取文件夹名称并去重
        CHANGED_DIRS=$(echo "$CHANGED_FILES" | awk '{print $NF}' | xargs -n 1 dirname | sort -u | tr '\n' ' ')

        # 提取顶级文件夹名称
        TOP_LEVEL_DIRS=$(echo "$CHANGED_DIRS" | tr ' ' '\n' | awk -F'/' '{print $1}' | sort -u | tr '\n' ' ')

        # 调试：显示更改的顶级文件夹名称
        echo "Changed top-level directories:"
        echo "$TOP_LEVEL_DIRS"

        # 将更改的顶级文件夹名称保存到 GitHub 环境变量
        if [[ -n "$TOP_LEVEL_DIRS" ]]; then
          echo "changed_dirs=$TOP_LEVEL_DIRS" >> $GITHUB_ENV
        else
          echo "changed_dirs=" >> $GITHUB_ENV
        fi

     




    - name: Upload
      run: |
        if [ -e $GITHUB_WORKSPACE/LICENSE ]; then
          cp $GITHUB_WORKSPACE/LICENSE $GITHUB_WORKSPACE/${{matrix.target}}
        fi
        if [ -e $GITHUB_WORKSPACE/README.md ]; then
          cp $GITHUB_WORKSPACE/README.md $GITHUB_WORKSPACE/${{matrix.target}}
        fi
        cd $GITHUB_WORKSPACE/${{matrix.target}}
        if git status --porcelain | grep .; then       
          git add .
          git commit -am "update $(date '+%Y-%m-%d %H:%M:%S')"
          git push --quiet "https://${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git" HEAD:${{ matrix.target }}
        else
          echo "nothing to commit"
          exit 0
        fi || exit 0    

    - name: Trigger Package_Build workflow
      if: env.changed_dirs != ''
      uses: benc-uk/workflow-dispatch@v1
      with:
        workflow: .github/workflows/Package_Build.yml。bak  # 确保路径正确
        token: ${{ secrets.GITHUB_TOKEN }}
        inputs: '{"packages": "${{ env.changed_dirs }}"}'

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}
        retain_days: 1
        keep_minimum_runs: 5
